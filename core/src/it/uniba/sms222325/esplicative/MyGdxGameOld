import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.utils.ScreenUtils;

public class MyGdxGame extends ApplicationAdapter {
	private SpriteBatch batch;
	private Texture img, block;
	private TextureRegion regionBlock;
	private int width, height;

	@Override
	public void create () {
		batch = new SpriteBatch();
		img = new Texture("badlogic.jpg");
		block = new Texture("block.png");
		//regionBlock = new TextureRegion(block, 0, 64, 128, 64);		// taglia un regione d'immagine

		width = Gdx.graphics.getWidth();
		height = Gdx.graphics.getHeight();

		Processor p = new Processor();
		Gdx.input.setInputProcessor(p);		// gestione parallela o asincrona dell'input
	}

	@Override
	public void render () {
		ScreenUtils.clear(0, 1, 0, 1);		// tinge lo schermo di un colore??
		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);		// pulisce la scheda video da immagini precedenti

		if (Gdx.input.justTouched()){
			System.out.println("Testini");
		}

		/* if (Gdx.input.isKeyJustPressed(Input.Keys.BACK)){
			System.out.println("indietro");
		} */

		batch.begin();
		batch.draw(img, 0, 0);
		batch.draw(block, img.getWidth(), 0);
		batch.end();
	}

	@Override
	public void dispose () {
		batch.dispose();
		img.dispose();
		block.dispose();
	}
}